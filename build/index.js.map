{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "../src/",
  "sources": [
    "index.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "'use strict'\r\n\r\nfs = require 'fs-extra'\r\nWavDecoder = require 'wav-decoder'\r\nWavEncoder = require 'wav-encoder'\r\npath = require 'path'\r\n\r\nmain = (filePath, triggerValue, minLengthSecs, maxSilenceLengthSecs, outputFileFolder, outputFilePrefix) ->\r\n  file = await fs.readFile filePath\r\n  decoded = await WavDecoder.decode file\r\n  outbursts = []\r\n  if decoded and decoded.sampleRate\r\n    for channel, c in decoded.channelData\r\n      lastSignificant = -1\r\n      start = -1\r\n      for sample, i in decoded.channelData[c]\r\n        if Math.abs(sample) > triggerValue\r\n          if i - lastSignificant > decoded.sampleRate * maxSilenceLengthSecs\r\n            if start isnt -1\r\n              length = lastSignificant - start\r\n              if length > decoded.sampleRate * minLengthSecs\r\n                outbursts.push \r\n                  channel: c\r\n                  start: +(start / decoded.sampleRate).toFixed(4)\r\n                  end: +((start + length) / decoded.sampleRate).toFixed(4)\r\n                  length: +(length / decoded.sampleRate).toFixed(4)\r\n            start = i\r\n          lastSignificant = i\r\n    outbursts.sort (a, b) ->\r\n      if a.start > b.start then 1 else -1\r\n    for outburst, i in outbursts\r\n      outburst.index = i\r\n      if i > 0\r\n        outburst.fromLast = +(outburst.start - outbursts[i - 1].end).toFixed(4)\r\n      if outputFileFolder and outputFilePrefix\r\n        outArr = new Float32Array(outburst.length * decoded.sampleRate).map (e, index) ->\r\n          decoded.channelData[outburst.channel][(outburst.start * decoded.sampleRate) + index]\r\n        buffer = await WavEncoder.encode\r\n          sampleRate: decoded.sampleRate,\r\n          channelData: [ outArr ]\r\n        await fs.writeFile path.join(outputFileFolder, outputFilePrefix + outburst.index + '_' + outburst.channel + '.wav'), new Buffer(buffer)\r\n  outbursts\r\n#main 'wavs/1.wav', 0.04, 0.25, 0.5\r\nmodule.exports = (args) ->\r\n    await main args.filePath, args.triggerValue or 0.04, args.minLengthSecs or 0.25, args.maxSilenceLengthSecs or 0.5, args.outputFileFolder, args.outputFilePrefix"
  ]
}